(module-extend "zeps"
  (export
    `("highlight-code" ,highlight))

  (highlight (lambda (str)
    (let ((col (lambda (x) (color x #{:to-str #t})))
          (orange (delay (escape-sequence "38;5;208" #t (nil)))))
      (let loop ((str str) (acc ""))
        (if (null? str)
          acc
          (case (car str)
            ((#\{ #\} #\[ #\] #\)) =>
              (lambda (char) (loop (cdr str) (++ acc (col :magenta) (string char) (col :reset)))))
            ((#\()
                (let* ((i (index-of str #\space))
                       (j (index-of str #\)))
                       (i (if (or (< i 0) (and (< j i) (> j -1))) j i))
                       (hd (substring str 1 (if (> i 0) i (length str))))
                       (tl (substring str (if (> i 0) i (length str)) (length str))))
                  (loop tl (++ acc (col :magenta) "(" (col :bold) (col :cyan) hd (col :reset)))))
            ((#\')
              (let ((next (cadr str)))
                (if (eq? #\( next)
                  (loop (cddr str) (++ acc (col :magenta) "'(" (col :reset)))
                  (let* ((i (index-of (cdr str) #\space))
                         (j (index-of str #\)))
                         (i (if (or (< i 0) (and (< j i) (> j -1))) j i))
                         (hd (substring str 0 (if (> i -1) i (length str))))
                         (tl (substring str (if (> i -1) i (length str)) (length str))))
                    (loop tl (++ acc (col :green) hd (col :reset)))))))
            ((#\#)
              (case (cadr str)
                ((#\{) (loop (cddr str) (++ acc (col :magenta) "#{" (col :reset))))
                ((#\t #\f) =>
                  (lambda (char) (loop (cddr str) (++ acc (orange) "#" (string char) (col :reset)))))
                ((#\\)
                  (let* ((i (add1 (index-of (cdr str) #\space)))
                         (j (index-of str #\)))
                         (i (if (or (< i 0) (and (< j i) (> j -1))) j i))
                         (hd (substring str 0 (add1 (if (> i 0) i (length str)))))
                         (tl (substring (cdr str) (if (> i 0) i (length str)) (length str))))
                    (loop tl (++ acc (orange) hd (col :reset)))))
                (else => (lambda (char) (write char)))))
            ((#\;)
                (let* ((i (add1 (index-of (cdr str) #\newline)))
                       (hd (substring str 0 (add1 (if (> i 0) i (length str)))))
                       (tl (substring (cdr str) (if (> i 0) i (length str)) (length str))))
                  (loop tl (++ acc (col :white) hd (col :reset)))))
            ((#\:)
                (let* ((i (add1 (index-of (cdr str) #\space)))
                       (j (index-of str #\)))
                       (i (if (or (< i 0) (and (< j i) (> j -1))) j i))
                       (hd (substring str 0 (if (> i 0) i (length str))))
                       (tl (substring str (if (> i 0) i (length str)) (length str))))
                  (loop tl (++ acc (col :yellow) hd (col :reset)))))
            ((#\")
                (let* ((i (add1 (index-of (cdr str) #\")))
                       (hd (substring str 0 (add1 (if (> i 0) i (length str)))))
                       (tl (substring (cdr str) (if (> i 0) i (length str)) (length str))))
                  (loop tl (++ acc (orange) hd (col :reset)))))
            (else => 
              (lambda (char)
                (if (char:num? char)
                  (let* ((i (add1 (index-of (cdr str) #\space)))
                         (j (index-of str #\)))
                         (i (if (or (< i 0) (and (< j i) (> j -1))) j i))
                         (hd (substring str 0 (add1 (if (> i 0) i (length str)))))
                         (tl (substring (cdr str) (if (> i 0) i (length str)) (length str))))
                    (loop tl (++ acc (orange) hd (col :reset))))
                  (loop (cdr str) (++ acc char))))))))))))
