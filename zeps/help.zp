(module-extend "zeps"
  (export
    `("help" ,help)
    `("help-info" ,help-info))
  
  (help-info #{:help "Interactive help on getting started."})

  (help (lambda (args)
    (define (continue-command)
      (begin
        (write "\nPress any key to continue")
        (read-char)))
    (begin
      (zeps:no-exit #t)
      (write "Welcome to the zeps interactive tutorial!\n")
      (write "This tutorial is going to guide you into the small world of zeps, the package manager.\n")
      (display "Let's get started! First, let's install some packages. ")
      (display "Let's install a package we will need later called lean. ")
      (write "We will install it directly from a Github repository this time, by typing:")
      (write "\tzeps install hellerve/lean@0.1.2")
      (continue-command)
      (display "install is the installation subcommand, it will take a package and a version tuple. ")
      (display "Packages can have any name that does not include a slash. ")
      (display "As you can see, the package above does include a slash, though. ")
      (display "This delimits the Github username from the Github repository. ")
      (write "So whenever we want to install something from Github, we just type <username>/<repo>@<version>. ")
      (continue-command)
      (write "Let's install the package! Type the above command into the prompt.")
      (let loop ((input (begin (display "> " :flush) (->string (read-line)))))
        (if (eq? (string:split input #\space) ["zeps" "install" "hellerve/lean@0.1.2"])
          (zeps:install "hellerve/lean@0.1.2" #{})
          (begin
            (write (++ "Oops, those commands did not match (I expected `zeps install hellerve/lean@0.1.2`, but got `" input "`). Please try again."))
            (loop (begin (display "> " :flush) (->string (read-line)))))))
      (display "Yay! You just installed your first package! ")
      (display "This is all the basics you will likely need to get up to speed here. ")
      (write "If you need any more information on installing , just type `zeps install`.")
      (continue-command)
      (display "\nLet's move on to building your own packages. ")
      (display "To make building packages as convenient and boilerplate-free as possible, ")
      (display "zeps introduces the notion of `templates`. With their help packages are relatively ")
      (write "easily built.")
      (continue-command)
      (display "Let's eximplify this. Remember the lean package? It is actually a templating package. ")
      (write "By typing")
      (write "\tzeps new lean your-project-name")
      (write "You instruct zeps to build a new package your-project-name based on the lean template. ")
      (continue-command)
      (write "Try creating your package (choose any name you want):")
      (let loop ((input (begin (display "> " :flush) (->string (read-line)))))
        (let ((input-list (string:split input #\space)))
          (if (eq? (list:sublist input-list 0 (sub1 (length input-list))) ["zeps" "new" "lean"])
            (zeps:new "lean" #{})
            (begin
              (write (++ "Oops, those commands did not match (I expected `zeps new lean project`, but got `" input "`). Please try again."))
              (loop (begin (display "> " :flush) (->string (read-line))))))))
      (write "Splendid!")))))
