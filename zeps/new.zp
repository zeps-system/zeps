(module-extend "zeps"
  (export
    `("new" ,new)
    `("new-info" ,new-info))

  (new-info #{:help "Bootstraps a new package."
              :options #{"git" #{:short "g"
                                 :type :boolean
                                 :help "flag that signifies that a git repo should be initialized."}}
              :arguments (("template-name"
                           "The template to use for bootstrapping.")
                          ("project"
                           "Where to build the new project."))})
  
  (new (lambda (name project args)
    (if (file-exists? (++ ((zeps:get-conf) :install-home) name "/module.zp"))
      (let ((info (zeps:get-package-info name)))
        (begin
          (if (not (eq? (info :type) :template))
            (zeps:die name " is not a template package."))
          (zeps:status "Creating project " project " from template " name ".")
          (system "mkdir" (list "-p" project))
          (os:change-dir project)
          (let ((zeps:get-template (lambda (template)
                  (read-contents (++ ((zeps:get-conf) :install-home) name "/templates/" template))))
                (zeps:build-template (lambda (file-name contents)
                  (begin
                    (zeps:status "Creating file " project "/" file-name ".")
                    (with-output-file file-name (lambda (x) (write contents x)))))))
            (begin
              (load (++ name "/" (info :entry-point)) (current-env))
              ((import (++ name ":build")) project)))
          (if (get-from args "git" #f)
            (begin
              (zeps:status "Initializing git repository.")
              (system "git" (list "init"))
              (system "git" (list "add" "."))))
          (os:change-dir "..")
          (zeps:success "Created project " project ".")))
      (zeps:die "Unknown template " name ". Please check whether it is installed.")))))
