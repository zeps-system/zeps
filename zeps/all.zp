(module "zeps"
  (export
    (list "die" die)
    (list "warning" warning)
    (list "status" status)
    (list "success" success)
    (list "prompt" prompt)
    (list "installed?" installed?)
    (list "no-exit" no-exit)
    (list "get-package-info" get-package-info)
    (list "read-module" read-module)
    (list "create-entry" create-entry)
    (list "conf" conf))

  (PRELUDE "if [[ -z \"$@\" ]]; then
    D=\"[]\"
else
D=\"[\"
for arg in $@; do
  D=$D\\\"$arg\\\"\\ 
done
D=${D%?}\"]\"
fi")

  (ex #t)

  (no-exit (lambda (b)
    (set! ex (not b))))

  (create-entry (lambda (lmod)
    (define (template path name)
      (++ "\"(begin (define zepto:name \\\"" name "\\\") (define zepto:args $D)
                    (load \\\"" name "\\\"))\""))
    (let* ((path (zeps:conf :install-home))
           (name (++ path (lmod :name)))
           (script (++ name "-script"))
           (file (open-output-file script)))
      (begin
        (write PRELUDE file)
        (write (++ "zepto -s " (template name (++ name "/" (get-from lmod :entry-point "main.zp"))))
               file)
        (close-output-file file)
        (bash:command "ln" (list "-s" script (++ "/usr/local/bin/" (lmod :name))))
        (bash:command "chmod" (list "u+x" script))))))

  (_read-module (lambda (name)
    (let ((path (++ name "/module.zp")))
      (if (file-exists? path)
        (let ((info (load path)))
          (if (and (hash-map? info) (truthy? info))
            info
            #{}))
        #{}))))

  (read-module (lambda (name)
    (let ((path (++ name "/module.zp")))
      (if (file-exists? path)
        (let ((info (load path)))
          (if (and (hash-map? info) (truthy? info))
            info
            (die "Package " name " has invalid module.zp file. Either fix or uninstall package.")))
        (die "Could not open file " path ".")))))

  (installed? (lambda (name version pred)
    (let ((info (_read-module (++ (conf :install-home) name))))
      (and (truthy? info) (pred (semver:parse (info :version)) version)))))

  (prompt (lambda (prompt)
    (begin
      (display (++ prompt " [y/n] ") :flush)
      (let ((i (char-ci=? #\y (read-char))))
        (begin
          (write "")
          i)))))


  (die (lambda args
    (define (err args)
      (define (esc n) (++ (++ "" (integer->char 27)) "[" (number->string n) "m"))
      (begin
        (display (esc 31))
        (display "Fatal: ")
        (display (esc 0) :flush)
        (for-each (lambda (x) (display x :stderr)) args)
        (write "")))
    (begin
      (err args)
      (exit 1))))

  (colorized-message (lambda (col msg . args)
    (begin
      (color :bold)
      (color col)
      (display msg)
      (color :reset)
      (write (apply ++ args)))))

  (warning (curry colorized-message :red "Warning: "))

  (success (lambda args
    (begin
      (apply colorized-message (cons :green (cons "Success: " args)))
      (if ex (exit 0)))))

  (status (curry colorized-message :yellow "Info: "))

  (conf (make-hash :install-home (++ (get-home-dir) "/.zeps/")
                   :github-url "https://github.com/"))
  
  (get-package-info (lambda (name)
    (read-module (++ (conf :install-home) name)))))

(load "zeps/zeps/install")
(load "zeps/zeps/register")
(load "zeps/zeps/upgrade")
(load "zeps/zeps/remove")
(load "zeps/zeps/repl")
(load "zeps/zeps/keygen")
(load "zeps/zeps/new")
(load "zeps/zeps/highlight")
(load "zeps/zeps/help")
