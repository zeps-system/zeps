(module-extend "zeps"
  (export
    (list "register-info" register-info)
    (list "register" register))

  (register-info #{:help "Registers a package."
                   :options #{"directory" #{:short "d"
                                            :help "the directory that should be registered (needs a valid module.zp file); defaults to the current directory"}
                              "github" #{:short "g"
                                         :type :boolean
                                         :help "whether the package should be published to Github. Defaults to false."}}})

  (publish-to-github (lambda (dir info)
    (begin
      (os:change-dir dir)
      (system "git" (list "tag" (info :version)))
      (system "git" (list "push" "--tags"))
      (nil))))

  (register (lambda (x)
    (let* ((directory (get-from x "directory" "."))
           (github (get-from x "github" false))
           (module-path (++ directory "/module.zp")))
      (begin
        (if (boolean? (open-input-file module-path))
          (zeps:die "Could not open file " module-path ". Please verify that it exists."))
        (let ((meta-inf (load module-path)))
          (begin
            (if (not (hash-map? meta-inf))
              (zeps:die "Invalid module.zp file. Needs to return hash-map, got "
                        (let ((str (->string meta-inf)))
                          (if (< 30 (length str)) (++ (substring str 0 30) "...") str))
                        " (type: " (typeof meta-inf)))
            (if (not (all? (curry in? meta-inf) [:version :author :name]))
              (zeps:die "Must specify at least package name (:name), "
                        "version (:version) and author (:author) in module.zp"))
            (if (or (not (string? (meta-inf :version))) (not (semver:valid? (meta-inf :version))))
              (zeps:die "The provided version tag " (meta-inf :version) " is not valid."
                        "Needs to be a valid semantic versionstring of the form x.y.z"))
            (if github
              (publish-to-github directory meta-inf))
            (if (not (file-exists? (++ ((zeps:get-conf) :install-home) ".keys/zeps_id")))
              (let ((prompt (zeps:prompt "No signature keys generated yet, should they be autogenerated (will be 2048 bits)?")))
                (if prompt (zeps:keygen #{}) (zeps:die "Cannot register package without keys."))))
            (zeps:success "Module " (meta-inf :name) "@" (meta-inf :version) " by "
                          (get-from meta-inf [:author :name] "Anonymous") " registered!"))))))))
