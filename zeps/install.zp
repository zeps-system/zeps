(module-extend "zeps"
  (export
    (list "install-info" install-info)
    (list "install" install))

  (loads "request/request" "json/json")

  (install-info #{:help "Installs a package."
                  :options #{"path" #{:short "p"
                                      :usage "optional package location"}
                             "as" #{:usage "optional package alias"}
                             "force" #{:type :boolean
                                       :short "f"
                                       :usage "forces installation of package"}}
                  :arguments (("name@version"
                               "Installs a specific version of a package. The @ character can be swapped out for any comparator (e.g. >, == or >=) or left out (will install latest version)."))})

  (comparators [#\@
                ">="
                "<="
                #\>
                #\<
                "=="])

  (parse-name-version (lambda (tuple)
    (cond
      ((in? tuple #\@) (++ (string:split tuple #\@) eq))
      ((in? tuple ">=") (++ (string:split tuple ">=") ge))
      ((in? tuple "<=") (++ (string:split tuple "<=") le))
      ((in? tuple #\>) (++ (string:split tuple #\>) gt))
      ((in? tuple #\<) (++ (string:split tuple #\<) lt))
      ((in? tuple "==") (++ (string:split tuple "==") eq))
      (else (zeps:die "Unparsable name-version tuple " tuple ".")))))

  (move (lambda (name path)
    (system "cp" (list "-r" path (++ ((zeps:get-conf) :install-home) name)))))

  (install-internal (lambda (lmod args)
    (begin
      (if (not (zeps:zepto-version-fits (get-from lmod [:zepto :version] :any)))
        (zeps:die "The package can only be installed by zepto versions "
                  (get-from lmod [:zepto :version]) "."))
      (if (truthy? (lmod :dependencies))
        (begin
          (zeps:status "Installing dependencies for package " (lmod :name) ".")
          (zeps:no-exit #t)
          (map (lambda (x) (begin (zeps:status "Installing " x "...") (install x args)))
               (lmod :dependencies))))
      (if (in? args "as")
        (zeps:warning "This will not override any previous non-aliased install of " (lmod :name)
                      ". Remove it by issuing `zeps remove " (lmod :name) "`."))
      (if (in? lmod :before-install)
        (let () (load (lmod :before-install))))
      (move (get-from args "as" (lmod :name)) (get-from args "path" "."))
      (if (eq? (lmod :type) :tool)
        (zeps:create-entry (hash:update lmod :name (lambda (name) (get-from args "as" name)))))
      (if (in? lmod :after-install)
        (let () (load (lmod :after-install))))
      (zeps:success (++ "installation of package " (lmod :name)
                        (if (in? args "as") (++ " (as " (args "as") ")") "")
                        ", version " (lmod :version) " done!")))))

  (make-random-name (lambda ()
    (begin
      (load "zpbash")
      (++ (->string (bash:unix-timestamp)) "_" (->string (randint 1000000000))))))

  (git-install (lambda (name version)
    (let ((rnd-tmp (make-random-name))
          (current-dir (cadr (system "pwd"))))
      (begin
        (zeps:status "Cloning repository...")
        (define clone (system "git" (list "clone" (++ ((zeps:get-conf) :github-url) name) rnd-tmp)))
        (if (not (eq? 0 (car clone)))
          (begin
            (system "rm" (list "-rf" rnd-tmp))
            (zeps:die "Cloning the repository " name
            " failed. Please check whether the repository exists."))
          (zeps:status "Cloned the repository " name "."))
        (zeps:status "Checking for requested version ("
                     (if (eq? :latest version) "latest" (->string version)) 
                     ")...")
        (zepto:change-dir rnd-tmp)
        (define vsn (if (eq? :latest version)
          (string:trim (cadr (system "git"
                        `("describe" "--tags"
                          ,(string:trim (cadr (system "git" ["rev-list" "--tags" "--max-count=1"])))))))
          version))
        (define tag (system "git" (list "checkout" (++ "tags/" (->string vsn)))))
        (if (not (eq? 0 (car tag)))
          (begin
            (zepto:change-dir "..")
            (system "rm" `("-rf" ,rnd-tmp))
            (zeps:die "Version " (->string vsn) " does not exist in git tags."))
          (zeps:status "Checked out version " (->string vsn) " of package " name "."))
        (zeps:status "Installing...")
        (zeps:no-exit #t)
        (install "." #{} (zeps:get-conf))
        (zepto:change-dir "..")
        (system "rm" `("-rf" ,rnd-tmp))
        (nil)))))

  (zpr-install (lambda (name version)
    (let* ((res ((import "request:get") (++ ((zeps:get-conf) :zpr-url)
                                        "/install/" name "/" (->string version))))
           (contents (res :body))
           (fname (make-random-name)))
      (if (eq? (res :status) 200)
        (begin
          (with-output-file fname
                            ($ (write contents %)))
          (zeps:status "Extracting package.")
          (system "tar" `("xvf" ,fname "-C" ,(++ ((zeps:get-conf) :install-home) "/" name)))
          (system "rm" `("-rf" ,fname))
          (zeps:success "Successfully installed package " name "."))
        (zeps:die "Installing the package " name " failed with HTTP " (res :status))))))

  (configure (lambda (version? name args)
    (let* ((tuple   (if version? (parse-name-version name) (list name :latest eq)))
           (pname   (car tuple))
           (gitfree (car (string:split pname #\/)))
           (gituser (get-from (string:split pname #\/) 1 ""))
           (version (if version? (semver:parse (cadr tuple)) :latest))
           (pred    (caddr tuple))
           (lmod    (try-local args)))
      (if (and (not version?)
               (zeps:installed? gitfree version pred)
               (not (x "force")))
        (zeps:success "Package " pname ", version " (->string version) " already installed.")
        (cond
          ((not (eq? gitfree pname))
            (begin
              (zeps:status "Trying to install package " gitfree " from " gituser "...")
              (git-install pname version)))
          ((and (eq? pname (lmod :name))
                version?
                (pred (semver:parse (lmod :version)) version))
            (begin
              (zeps:status "Found local package that matches the version constraint.")
              (install-internal lmod x)))
          (else
            (begin
              (import-all "request")
              (zeps:status "Searching the package database...")
              (let ((res (request:get (++ ((zeps:get-conf) :zpr-url) "/packages/" pname))))
                (case (res :status)
                  ((200)
                    (let ((packages (json:parse (res :body))))
                      (if (falsy? packages)
                        (zeps:status "No package matching the term " name " found: " (res :body))
                        (begin
                          (zeps:status "Found matching package on the database.")
                          (zpr-install name version)))))
                  ((404)
                    (zeps:status "No package with the name " name " found."))
                  (else =>
                    (lambda (status) (zeps:die "The API returned HTTP " status))))))))))))

  (try-local (lambda (args)
    (let ((path (get-from args "path" ".")))
      (if (open-input-file (++ path "/module.zp"))
        (zeps:read-module path)
        #{}))))

  (install (lambda (name x . conf)
    (begin
      (if (not (null? conf)) (zeps:set-conf (car conf)))
      (if (or (eq? name ".") (in? x :path))
        (let ((lmod (try-local x)))
          (if (truthy? lmod)
            (install-internal lmod x)
            (zeps:die "Wanted directory is not a zepto module.")))
        (if (not (any? (lambda (x) (in? name x)) comparators))
          (begin
            (zeps:status "No version information found.")
            (zeps:status "Trying to install latest version of the package...")
            (configure #f name x))
          (configure #t name x)))))))
