(module-extend "zeps"
  (export
    (list "install-info" install-info)
    (list "install" install))

  (install-info #{:help "Installs a package."
                  :options #{"path" #{:short "p"
                                      :usage "optional package location"}}
                  :arguments (("name@version"
                               "Installs a specific version of a package. The @ character can be swapped out for any comparator (e.g. >, == or >=) or left out (will install latest version)."))})

  (parse-name-version (lambda (tuple)
    (cond
      ((in? tuple #\@) (++ (string:split tuple #\@) eq))
      ((in? tuple ">=") (++ (string:split tuple ">=") ge))
      ((in? tuple "<=") (++ (string:split tuple "<=") le))
      ((in? tuple #\>) (++ (string:split tuple #\>) gt))
      ((in? tuple #\<) (++ (string:split tuple #\<) lt))
      ((in? tuple "==") (++ (string:split tuple "==") eq))
      (else (zeps:die "Unparsable name-version tuple" tuple)))))

  (move (lambda (name)
    (begin
      (load "zpbash")
      (bash:command "cp" (list "-r" "." (++ (zeps:conf :install-home) name))))))

  (install-internal (lambda (lmod)
    (begin
      (if (in? lmod :before-install)
        (let () (load (lmod :before-install))))
      (move (lmod :name))
      (if (eq? (lmod :type) :tool)
        (zeps:create-entry lmod))
      (zeps:success (++ "installation of package " (lmod :name)
                        ", version " (lmod :version) " done!")))))

  (install (lambda (name x)
    (define (try-local)
      (let ((path (get-from x "path" ".")))
        (if (open-input-file (++ path "/module.zp"))
          (zeps:read-module path)
          #{})))
    (if (or (eq? name ".") (in? x :path))
      (let ((lmod (try-local)))
        (if (truthy? lmod)
          (install-internal lmod)
          (zeps:die "Wanted directory is not a zepto module.")))
      (let* ((tuple   (parse-name-version name))
             (pname   (car tuple))
             (version (semver:parse (cadr tuple)))
             (pred    (caddr tuple))
             (lmod    (try-local)))
        (if (and (eq? pname (lmod :name))
                 (pred (semver:parse (lmod :version)) version))
          (begin
            (zeps:status "Found local package that matches the version constraint")
            (install-internal lmod))
          (begin
            (zeps:status "Searching the package database"))))))))
