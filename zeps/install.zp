(module-extend "zeps"
  (export
    (list "install-info" install-info)
    (list "install" install))

  (install-info #{:help "Installs a package."
                  :arguments (("name@version"
                               "Installs a specific version of a package. The @ character can be swapped out for any comparator (e.g. >, == or >=) or left out (will install latest version)."))})

  (parse-name-version (lambda (tuple)
    (cond
      ((in? tuple #\@) (++ (string:split tuple #\@) eq))
      ((in? tuple ">=") (++ (string:split tuple ">=") ge))
      ((in? tuple "<=") (++ (string:split tuple "<=") le))
      ((in? tuple #\>) (++ (string:split tuple #\>) gt))
      ((in? tuple #\<) (++ (string:split tuple #\<) lt))
      ((in? tuple "==") (++ (string:split tuple "==") eq))
      (else (zeps:die "Unparsable name-version tuple" tuple)))))

  (move (lambda (name)
    (begin
      (load "zpbash")
      (bash:command "cp" (list "-r" "." (++ (zeps:conf :install-home) name))))))

  (install (lambda (name x)
    (begin
      (load "vendor/semver/sv.zp")
      (let* ((tuple   (parse-name-version name))
             (pname   (car tuple))
             (version (semver:parse (cadr tuple)))
             (pred    (caddr tuple))
             (lmod    (if (open-input-file "module.zp") (zeps:read-module ".") #{})))
        (if (and (eq? pname (lmod :name))
                 (pred (semver:parse (lmod :version)) version))
          (begin
            (zeps:status "Found local package that matches the version constraint")
            (move pname)
            (zeps:create-entry lmod)
            (zeps:success (++ "installation of package " pname ", version " (->string version) " done!")))
          (begin
            (zeps:status "Searching the package database"))))))))
