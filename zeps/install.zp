(module-extend "zeps"
  (export
    (list "install-info" install-info)
    (list "install" install))

  (install-info #{:help "Installs a package."
                  :options #{"path" #{:short "p"
                                      :usage "optional package location"}
                             "as" #{:usage "optional package alias"}
                             "force" #{:type :boolean
                                       :short "f"
                                       :usage "forces installation of package"}}
                  :arguments (("name@version"
                               "Installs a specific version of a package. The @ character can be swapped out for any comparator (e.g. >, == or >=) or left out (will install latest version)."))})

  (parse-name-version (lambda (tuple)
    (cond
      ((in? tuple #\@) (++ (string:split tuple #\@) eq))
      ((in? tuple ">=") (++ (string:split tuple ">=") ge))
      ((in? tuple "<=") (++ (string:split tuple "<=") le))
      ((in? tuple #\>) (++ (string:split tuple #\>) gt))
      ((in? tuple #\<) (++ (string:split tuple #\<) lt))
      ((in? tuple "==") (++ (string:split tuple "==") eq))
      (else (zeps:die "Unparsable name-version tuple " tuple ".")))))

  (move (lambda (name)
    (begin
      (load "zpbash")
      (bash:command "cp" (list "-r" "." (++ (zeps:conf :install-home) name))))))

  (install-internal (lambda (lmod args)
    (begin
      (if (truthy? (lmod :dependencies))
        (begin
          (zeps:status "Installing dependencies for package " (lmod :name) ".")
          (zeps:no-exit #t)
          (map (lambda (x) (begin (zeps:status "Installing " x "...") (install x args)))
               (lmod :dependencies))))
      (if (in? args "as")
        (zeps:warning "This will not override any previous non-aliased install of " (lmod :name)
                      ". Remove it by issuing `zeps remove " (lmod :name) "`."))
      (if (in? lmod :before-install)
        (let () (load (lmod :before-install))))
      (move (get-from args "as" (lmod :name)))
      (if (eq? (lmod :type) :tool)
        (zeps:create-entry (hash:update lmod :name (lambda (name) (get-from args "as" name)))))
      (zeps:success (++ "installation of package " (lmod :name)
                        (if (in? args "as") (++ " (as " (args "as") ")") "")
                        ", version " (lmod :version) " done!")))))

  (make-random-name (lambda ()
    (begin
      (load "zpbash")
      (++ (->string (bash:unix-timestamp)) "_" (->string (randint 1000000000))))))

  (git-install (lambda (name version)
    (let ((rnd-tmp (make-random-name))
          (current-dir (cadr (system "pwd"))))
      (begin
        (zeps:status "Cloning repository...")
        (define clone (system "git" (list "clone" (++ (zeps:conf :github-url) name) rnd-tmp)))
        (if (not (eq? 0 (car clone)))
          (begin
            (system "rm" (list "-rf" rnd-tmp))
            (zeps:die "Cloning the repository " name
            " failed. Please check whether the repository exists."))
          (zeps:status "Cloned the repository " name "."))
        (zeps:status "Checking for requested version (" (->string version) ")...")
        (zepto:change-dir rnd-tmp)
        (define tag (system "git" (list "checkout" (++ "tags/" (->string version)))))
        (if (not (eq? 0 (car tag)))
          (begin
            (system "rm" (list "-rf" rnd-tmp))
            (zeps:die "Version " (->string version) " does not exist in git tags."))
          (zeps:status "Checked out version " (->string version) " of package " name "."))
        (zeps:status "Installing...")
        (define out (system "zeps" (list "install" ".")))
        (if (truthy? (caddr out))
          (zeps:warning (caddr out))
          (write (cadr out)))
        (zepto:change-dir "..")
        (system "rm" (list "-rf" rnd-tmp))
        (nil)))))

  (install (lambda (name x)
    (define (try-local)
      (let ((path (get-from x "path" ".")))
        (if (open-input-file (++ path "/module.zp"))
          (zeps:read-module path)
          #{})))
    (if (or (eq? name ".") (in? x :path))
      (let ((lmod (try-local)))
        (if (truthy? lmod)
          (install-internal lmod x)
          (zeps:die "Wanted directory is not a zepto module.")))
      (let* ((tuple   (parse-name-version name))
             (pname   (car tuple))
             (gitfree (car (string:split pname #\/)))
             (gituser (get-from (string:split pname #\/) 1 ""))
             (version (semver:parse (cadr tuple)))
             (pred    (caddr tuple))
             (lmod    (try-local)))
        (if (and (zeps:installed? (++ (zeps:conf :install-home) gitfree) version pred) (not (x "force")))
          (zeps:success "Package " pname ", version " (->string version) " already installed.")
          (cond
            ((not (eq? gitfree pname))
              (begin
                (zeps:status "Trying to install package " gitfree " from " gituser "...")
                (git-install pname version)))
            ((and (eq? pname (lmod :name))
                  (pred (semver:parse (lmod :version)) version))
              (begin
                (zeps:status "Found local package that matches the version constraint.")
                (install-internal lmod x)))
            (else
              (begin
                (zeps:status "Searching the package database..."))))))))))
